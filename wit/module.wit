package helium:framework@0.1.0;

/// Generic module interface for application modules (bank, staking, etc.)
interface module {
    /// Message to be handled by the module
    record message {
        /// Message type URL (e.g., "/cosmos.bank.v1beta1.MsgSend")
        type-url: string,
        /// Message data as JSON
        data: string,
        /// Sender of the message
        sender: string,
    }

    /// Module execution context
    record module-context {
        /// Current block height
        block-height: u64,
        /// Block timestamp
        block-time: u64,
        /// Chain ID
        chain-id: string,
        /// Whether this is a simulation
        simulate: bool,
    }

    /// Response from module execution
    record module-response {
        /// Whether execution succeeded
        success: bool,
        /// Result data as JSON
        data: option<string>,
        /// Events emitted
        events: list<event>,
        /// Error message if failed
        error: option<string>,
        /// Gas consumed
        gas-used: u64,
    }

    /// Event attribute key-value pair
    record event-attribute {
        key: string,
        value: string,
    }

    /// Event emitted during execution
    record event {
        /// Event type
        event-type: string,
        /// Event attributes as structured data
        attributes: list<event-attribute>,
    }

    /// Handle a message
    handle: func(context: module-context, msg: message) -> module-response;

    /// Query module state
    query: func(path: string, data: list<u8>) -> result<list<u8>, string>;
}

/// Module state resource for accessing blockchain module state
interface module-state {
    /// Validator update data
    record validator-update-data {
        pub-key-type: string,
        pub-key-value: list<u8>,
        power: s64,
    }

    /// Governance proposal
    record proposal {
        id: u64,
        voting-end-time: u64,
        yes-votes: u64,
        no-votes: u64,
        abstain-votes: u64,
        no-with-veto-votes: u64,
    }

    /// Module state data
    record state-data {
        /// Pending validator updates
        pending-validator-updates: list<validator-update-data>,
        /// Active governance proposals
        active-proposals: list<proposal>,
        /// Current inflation rate
        inflation-rate: f64,
        /// Last reward distribution height
        last-reward-height: u64,
        /// Total voting power
        total-power: s64,
        /// Block proposer address
        proposer-address: list<u8>,
    }

    /// Get current module state
    get-state: func() -> state-data;
}

/// KVStore resource for blockchain state access
interface kvstore {
    /// Resource handle for a KVStore
    resource store {
        /// Get a value by key
        get: func(key: list<u8>) -> option<list<u8>>;
        
        /// Set a key-value pair
        set: func(key: list<u8>, value: list<u8>);
        
        /// Delete a key
        delete: func(key: list<u8>);
        
        /// Check if a key exists
        has: func(key: list<u8>) -> bool;
        
        /// Iterate over a range of keys
        /// Returns list of (key, value) pairs
        range: func(start: option<list<u8>>, end: option<list<u8>>, limit: u32) -> list<tuple<list<u8>, list<u8>>>;
    }

    /// Open a store by name
    open-store: func(name: string) -> result<store, string>;
}

// Note: begin-blocker and end-blocker interfaces are defined in their respective .wit files

world module-world {
    import kvstore;
    export module;
}

// Note: world definitions are in their respective .wit files

