syntax = "proto3";
package cosmos.tx.v1beta1;

import "google/protobuf/any.proto";
import "cosmos/base/abci/v1beta1/abci.proto";
import "cosmos/tx/v1beta1/tx.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/cosmos/cosmos-sdk/types/tx";

// Service defines a gRPC service for interacting with transactions
service Service {
  // Simulate simulates executing a transaction for estimating gas usage
  rpc Simulate(SimulateRequest) returns (SimulateResponse) {}
  
  // GetTx fetches a tx by hash
  rpc GetTx(GetTxRequest) returns (GetTxResponse) {}
  
  // BroadcastTx broadcast transaction
  rpc BroadcastTx(BroadcastTxRequest) returns (BroadcastTxResponse) {}
  
  // GetTxsEvent fetches txs by event
  rpc GetTxsEvent(GetTxsEventRequest) returns (GetTxsEventResponse) {}
}

// SimulateRequest is the request type for the Service.Simulate RPC method
message SimulateRequest {
  // tx is the transaction to simulate
  Tx tx = 1;
  // tx_bytes is the raw transaction
  bytes tx_bytes = 2;
}

// SimulateResponse is the response type for the Service.Simulate RPC method
message SimulateResponse {
  // gas_info is the information about gas used in the simulation
  GasInfo gas_info = 1;
  // result is the result of the simulation
  Result result = 2;
}

// GetTxRequest is the request type for the Service.GetTx RPC method
message GetTxRequest {
  // hash is the tx hash to query
  string hash = 1;
}

// GetTxResponse is the response type for the Service.GetTx RPC method
message GetTxResponse {
  // tx is the queried transaction
  Tx tx = 1;
  // tx_response is the queried TxResponse
  TxResponse tx_response = 2;
}

// BroadcastTxRequest is the request type for the Service.BroadcastTx RPC method
message BroadcastTxRequest {
  // tx_bytes is the raw transaction
  bytes tx_bytes = 1;
  // mode is the broadcasting mode
  BroadcastMode mode = 2;
}

// BroadcastMode specifies the broadcast mode for the Service.BroadcastTx RPC method
enum BroadcastMode {
  // zero-value for mode ordering
  BROADCAST_MODE_UNSPECIFIED = 0;
  // BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
  // the tx to be committed in a block
  BROADCAST_MODE_BLOCK = 1;
  // BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
  // a CheckTx execution response only
  BROADCAST_MODE_SYNC = 2;
  // BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
  // immediately
  BROADCAST_MODE_ASYNC = 3;
}

// BroadcastTxResponse is the response type for the Service.BroadcastTx method
message BroadcastTxResponse {
  // tx_response is the queried TxResponse
  TxResponse tx_response = 1;
}

// GetTxsEventRequest is the request type for the Service.TxsByEvents RPC method
message GetTxsEventRequest {
  // events is the list of transaction event type
  repeated string events = 1;
  // pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// GetTxsEventResponse is the response type for the Service.TxsByEvents RPC method
message GetTxsEventResponse {
  // txs is the list of queried transactions
  repeated Tx txs = 1;
  // tx_responses is the list of queried TxResponses
  repeated TxResponse tx_responses = 2;
  // pagination defines an optional pagination for the response
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

// TxResponse defines a structure containing relevant tx data and metadata
message TxResponse {
  int64 height = 1;
  string txhash = 2;
  string codespace = 3;
  uint32 code = 4;
  string data = 5;
  string raw_log = 6;
  repeated cosmos.base.abci.v1beta1.ABCIMessageLog logs = 7;
  string info = 8;
  int64 gas_wanted = 9;
  int64 gas_used = 10;
  google.protobuf.Any tx = 11;
  string timestamp = 12;
  repeated cosmos.base.abci.v1beta1.Event events = 13;
}

// Result is the union of ResponseFormat and ResponseCheckTx
message Result {
  // Data is any data returned from message or handler execution. It MUST be length
  // prefixed in order to separate data from multiple message executions.
  bytes data = 1;
  
  // Log contains the log information from message or handler execution.
  string log = 2;
  
  // Events contains a slice of Event objects that were emitted during message or
  // handler execution.
  repeated cosmos.base.abci.v1beta1.Event events = 3;
}

// GasInfo defines tx execution gas context
message GasInfo {
  // gas_wanted is the maximum units of work we allow this tx to perform
  uint64 gas_wanted = 1;
  
  // gas_used is the amount of gas actually consumed
  uint64 gas_used = 2;
}