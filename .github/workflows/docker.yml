name: Docker Build and Push

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'docker-compose*.yml'
      - 'crates/**'
      - '.github/workflows/docker.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Test Docker image
        if: github.event_name == 'pull_request'
        run: |
          # Load the image for testing
          docker buildx build --load -t helium:test .
          
          # Test that the binary runs
          docker run --rm helium:test helium-server version
          
          # Test initialization
          docker run --rm -v /tmp/helium-test:/helium helium:test helium-server init --chain-id test-chain
          
          # Verify WASI modules are included
          docker run --rm helium:test ls -la /usr/local/lib/helium/wasi-modules/

  scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  docker-compose-test:
    name: Docker Compose Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compose-file: [docker-compose.yml, docker-compose.multi.yml]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Validate Docker Compose file
        run: |
          docker-compose -f ${{ matrix.compose-file }} config
      
      - name: Check service definitions
        run: |
          # Extract service names
          SERVICES=$(docker-compose -f ${{ matrix.compose-file }} config --services)
          echo "Services defined: $SERVICES"
          
          # Verify required services exist
          if [[ "${{ matrix.compose-file }}" == "docker-compose.yml" ]]; then
            echo "$SERVICES" | grep -q "cometbft" || exit 1
            echo "$SERVICES" | grep -q "helium" || exit 1
          else
            # Multi-node should have 4 of each
            for i in 0 1 2 3; do
              echo "$SERVICES" | grep -q "cometbft-$i" || exit 1
              echo "$SERVICES" | grep -q "helium-$i" || exit 1
            done
          fi
          
          echo "âœ“ All required services defined"