name: WASM Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  wasm-test:
    name: Test WASM Modules
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-wasip1
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
    
    - name: Install wasmtime
      run: |
        curl https://wasmtime.dev/install.sh -sSf | bash
        echo "$HOME/.wasmtime/bin" >> $GITHUB_PATH
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-wasm-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-wasm-
    
    - name: Install cargo-component
      run: |
        cargo install cargo-component --locked
    
    - name: Build WASM modules
      run: |
        # Use the build script to build WASI modules with cargo-component
        ./scripts/build-wasi-modules.sh
    
    - name: Test WASM module loading
      run: |
        # Test that WASM modules can be loaded
        for wasm in modules/*.wasm; do
          if [ -f "$wasm" ]; then
            echo "Testing WASM module: $wasm"
            wasmtime compile "$wasm"
          fi
        done
    
    - name: Validate WASM modules
      run: |
        # Validate WASM module structure
        # Note: wasmtime doesn't have a built-in validation command for components
        # The compile step above already validates the modules
        echo "WASM modules validated during compile step"
    
    - name: Check WASM module sizes
      run: |
        # Report WASM module sizes
        echo "WASM Module Sizes:"
        ls -lh modules/*.wasm 2>/dev/null || echo "No WASM modules found"
    
    - name: Run WASM integration tests
      run: |
        # Run integration tests that test WASM module loading
        # These tests run on the host, not in WASM
        cargo test --workspace --exclude ante-handler --exclude begin-blocker --exclude end-blocker --exclude tx-decoder -- test_wasi_modules test_minimal_wasi_module test_component