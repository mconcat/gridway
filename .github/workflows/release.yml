name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: helium-server
            asset_name: helium-server-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: helium-server
            asset_name: helium-server-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: helium-server
            asset_name: helium-server-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: helium-server
            asset_name: helium-server-darwin-arm64
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          version: "25.x"
      
      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }} --bin helium-server
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
      
      - name: Create tarball
        run: |
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }} README-COMETBFT.md LICENSE
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: ${{ matrix.asset_name }}.tar.gz

  build-wasi-modules:
    name: Build WASI Modules
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasi
      
      - name: Build WASI modules
        run: |
          cargo build --release --target wasm32-wasi -p ante-handler
          cargo build --release --target wasm32-wasi -p begin-blocker
          cargo build --release --target wasm32-wasi -p end-blocker
          cargo build --release --target wasm32-wasi -p tx-decoder
      
      - name: Package WASI modules
        run: |
          mkdir -p wasi-modules
          cp target/wasm32-wasi/release/*.wasm wasi-modules/
          tar czf helium-wasi-modules.tar.gz wasi-modules/
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: wasi-modules
          path: helium-wasi-modules.tar.gz

  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    needs: [build-binaries, build-wasi-modules, docker-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        id: changelog
        run: |
          cat > CHANGELOG.md << EOF
          ## What's Changed
          
          ### 🚀 Features
          - CometBFT v0.38.0 integration with ABCI++
          - Health check endpoints for monitoring
          - Connection resilience with exponential backoff
          - Multi-node testnet support (1-4 validators)
          - Docker-based deployment
          
          ### 📦 Assets
          - Linux AMD64 binary
          - Linux ARM64 binary  
          - macOS AMD64 binary
          - macOS ARM64 binary
          - WASI modules bundle
          - Docker images: \`ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}\`
          
          ### 🐳 Quick Start
          \`\`\`bash
          # Using Docker
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          
          # Using binaries
          tar xzf helium-server-linux-amd64.tar.gz
          ./helium-server version
          \`\`\`
          
          See [CometBFT Integration Guide](https://github.com/${{ github.repository }}/blob/main/docs/cometbft-integration.md) for detailed setup instructions.
          EOF
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Helium ${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: |
            binaries/*.tar.gz
            wasi-modules/*.tar.gz

  update-docs:
    name: Update Documentation
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Update version references
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          
          # Update docker-compose.yml with new version
          sed -i "s|cometbft/cometbft:v[0-9.]*|cometbft/cometbft:v0.38.0|g" docker-compose*.yml
          
          # Update documentation
          sed -i "s|ghcr.io/${{ github.repository }}:v[0-9.]*|ghcr.io/${{ github.repository }}:${VERSION}|g" docs/*.md README*.md
      
      - name: Create pull request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update version references to ${{ github.ref_name }}"
          title: "chore: update version references to ${{ github.ref_name }}"
          body: |
            This PR updates version references in documentation and configuration files to ${{ github.ref_name }}.
            
            Auto-generated by release workflow.
          branch: update-version-${{ github.ref_name }}
          delete-branch: true