name: End-to-End Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-wasip1
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y librocksdb-dev protobuf-compiler libssl-dev pkg-config jq
    
    - name: Install Tendermint
      run: |
        TENDERMINT_VERSION="0.34.29"
        wget https://github.com/tendermint/tendermint/releases/download/v${TENDERMINT_VERSION}/tendermint_${TENDERMINT_VERSION}_linux_amd64.tar.gz
        tar -xzf tendermint_${TENDERMINT_VERSION}_linux_amd64.tar.gz
        sudo mv tendermint /usr/local/bin/
        tendermint version
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Build all components
      run: |
        # Build main application
        cargo build --release
        # Build WASM modules
        cd crates/wasi-modules
        cargo build --release --target wasm32-wasip1
        cd ../..
    
    - name: Setup test environment
      run: |
        # Create test directories
        mkdir -p test-data/{node1,node2}
        # Initialize Tendermint for multiple nodes
        tendermint init --home test-data/node1
        tendermint init --home test-data/node2
    
    - name: Start blockchain network
      run: |
        # Start first node
        cargo run --release --bin helium-server -- \
          --home test-data/node1 \
          --abci-port 26658 \
          --grpc-port 9090 &
        NODE1_PID=$!
        echo "NODE1_PID=$NODE1_PID" >> $GITHUB_ENV
        
        # Start Tendermint for first node
        tendermint node \
          --home test-data/node1 \
          --proxy_app=tcp://127.0.0.1:26658 \
          --p2p.laddr=tcp://0.0.0.0:26656 \
          --rpc.laddr=tcp://0.0.0.0:26657 > node1-tendermint.log 2>&1 &
        TM1_PID=$!
        echo "TM1_PID=$TM1_PID" >> $GITHUB_ENV
        
        sleep 15  # Wait for network to start
    
    - name: Test transaction submission
      run: |
        # Test submitting a transaction
        # This would use the helium-client or direct API calls
        echo "Testing transaction submission..."
        
        # Check node status
        curl -s http://localhost:26657/status | jq .
        
        # Submit a test transaction (adjust based on your API)
        # cargo run --release --bin helium-client -- tx send ...
    
    - name: Test query functionality
      run: |
        # Test querying blockchain state
        echo "Testing query functionality..."
        
        # Query blockchain height
        curl -s http://localhost:26657/status | jq .result.sync_info.latest_block_height
        
        # Add more specific query tests based on your API
    
    - name: Test WASM module execution
      run: |
        # Test WASM module functionality in the blockchain
        echo "Testing WASM module execution..."
        
        # Deploy and execute WASM modules
        # This would depend on your specific WASM integration
    
    - name: Run E2E test suite
      run: |
        # Run dedicated E2E tests if they exist
        cargo test --release --features e2e-tests e2e || echo "No E2E test suite found"
    
    - name: Collect logs on failure
      if: failure()
      run: |
        echo "=== Node 1 Tendermint Logs ==="
        cat node1-tendermint.log || true
        echo "=== Test Data Directory ==="
        ls -la test-data/ || true
    
    - name: Cleanup
      if: always()
      run: |
        # Kill all processes
        kill $NODE1_PID || true
        kill $TM1_PID || true
        # Clean up test data
        rm -rf test-data/